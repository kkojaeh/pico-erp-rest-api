buildscript {
  apply from: 'https://rawgit.com/kkojaeh/pico-erp-gradle/spring-boot-2/buildscript.gradle'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'net.ltgt.apt'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'net.researchgate.release'
apply plugin: 'io.github.divinespear.jpa-schema-generate'
apply plugin: 'org.springframework.boot'

ext {
  linkHomepage = 'https://kkojaeh.github.io/pico-erp-server/#/'
  linkCi = 'https://travis-ci.org/kkojaeh/pico-erp-rest-api'
  linkIssue = 'https://github.com/kkojaeh/pico-erp-rest-api/issues'
  linkScmUrl = 'https://github.com/kkojaeh/pico-erp-rest-api'
  linkScmConnection = 'scm:git:git://github.com/kkojaeh/pico-erp-rest-api.git'
  linkScmDevConnection = 'scm:git:ssh://git@github.com/kkojaeh/pico-erp-rest-api.git'
}

apply from: 'https://github.com/kkojaeh/pico-erp-gradle/raw/spring-boot-2/parent.gradle'
apply from: 'https://github.com/kkojaeh/pico-erp-gradle/raw/spring-boot-2/impl.gradle'

dependencies {

  compile("org.projectlombok:lombok:${lombokVersion}")

  // shared
  compile("com.github.kkojaeh.pico-erp-shared:impl:${sharedVersion}")

  // user
  compile("com.github.kkojaeh.pico-erp-user:api:${userVersion}")
  runtime("com.github.kkojaeh.pico-erp-user:test:${userVersion}")

  // comment
  compile("com.github.kkojaeh.pico-erp-comment:api:${commentVersion}")
  runtime("com.github.kkojaeh.pico-erp-comment:test:${commentVersion}")

  // warehouse
  compile("com.github.kkojaeh.pico-erp-warehouse:api:${warehouseVersion}")
  runtime("com.github.kkojaeh.pico-erp-warehouse:test:${warehouseVersion}")

  // work-schedule
  runtime("com.github.kkojaeh.pico-erp-work-schedule:test:${workScheduleVersion}")

  compile("com.github.kkojaeh.pico-erp-facility:api:${facilityVersion}")
  compile("com.github.kkojaeh.pico-erp-work-schedule:api:${workScheduleVersion}")
  compile("com.github.kkojaeh.pico-erp-order-acceptance:api:${orderAcceptanceVersion}")

  compile("com.github.kkojaeh.pico-erp-bom:api:${bomVersion}")
  compile("com.github.kkojaeh.pico-erp-purchase-request:api:${purchaseRequestVersion}")
  compile("com.github.kkojaeh.pico-erp-purchase-order:api:${purchaseOrderVersion}")
  compile("com.github.kkojaeh.pico-erp-purchase-invoice:api:${purchaseInvoiceVersion}")
  compile("com.github.kkojaeh.pico-erp-invoice:api:${invoiceVersion}")
  compile("com.github.kkojaeh.pico-erp-notify:api:${notifyVersion}")
  compile("com.github.kkojaeh.pico-erp-notify:mattermost:${notifyVersion}")
  compile("com.github.kkojaeh.pico-erp-production-request:api:${productionRequestVersion}")
  compile("com.github.kkojaeh.pico-erp-production-plan:api:${productionPlanVersion}")
  compile("com.github.kkojaeh.pico-erp-product-specification:api:${productSpecificationVersion}")
  compile("com.github.kkojaeh.pico-erp-outsourcing-request:api:${outsourcingRequestVersion}")
  compile("com.github.kkojaeh.pico-erp-outsourcing-order:api:${outsourcingOrderVersion}")
  compile("com.github.kkojaeh.pico-erp-outsourcing-invoice:api:${outsourcingInvoiceVersion}")
  compile("com.github.kkojaeh.pico-erp-outsourced-invoice:api:${outsourcedInvoiceVersion}")

  // FAX
  compile("com.github.kkojaeh.pico-erp-fax:api:${faxVersion}")
  compile("com.github.kkojaeh.pico-erp-fax:twilio-aws-s3:${faxVersion}")
  runtime("com.github.kkojaeh.pico-erp-fax:impl:${faxVersion}")

  // e-document
  compile("com.github.kkojaeh.pico-erp-e-document:api:${documentVersion}")
  compile("com.github.kkojaeh.pico-erp-e-document:file:${documentVersion}")
  compile("com.github.kkojaeh.pico-erp-e-document:aws-s3:${documentVersion}")
  compile("com.github.kkojaeh.pico-erp-e-document:pdfmake:${documentVersion}")
  compile("com.github.kkojaeh.pico-erp-e-document:impl:${documentVersion}")

  // delivery
  compile("com.github.kkojaeh.pico-erp-delivery:api:${deliveryVersion}")
  runtime("com.github.kkojaeh.pico-erp-delivery:impl:${deliveryVersion}")
  compile("com.github.kkojaeh.pico-erp-delivery:fax:${deliveryVersion}")
  compile("com.github.kkojaeh.pico-erp-delivery:spring-mail:${deliveryVersion}")

  // attachment
  compile("com.github.kkojaeh.pico-erp-attachment:api:${attachmentVersion}")
  compile("com.github.kkojaeh.pico-erp-attachment:file:${attachmentVersion}")
  compile("com.github.kkojaeh.pico-erp-attachment:aws-s3:${attachmentVersion}")
  runtime("com.github.kkojaeh.pico-erp-attachment:test:${attachmentVersion}")

  // process
  compile("com.github.kkojaeh.pico-erp-process:api:${processVersion}")
  compile("com.github.kkojaeh.pico-erp-process:jjschema:${processVersion}")
  runtime("com.github.kkojaeh.pico-erp-process:test:${processVersion}")

  // item
  compile("com.github.kkojaeh.pico-erp-item:api:${itemVersion}")
  compile("com.github.kkojaeh.pico-erp-item:jjschema:${itemVersion}")
  runtime("com.github.kkojaeh.pico-erp-item:test:${itemVersion}")

  // production-order
  compile("com.github.kkojaeh.pico-erp-production-order:api:${productionOrderVersion}")
  runtime("com.github.kkojaeh.pico-erp-production-order:test:${productionOrderVersion}")

  // production-execution
  compile("com.github.kkojaeh.pico-erp-production-execution:api:${productionExecutionVersion}")
  runtime("com.github.kkojaeh.pico-erp-production-execution:test:${productionExecutionVersion}")

  // production-mediator
  compile("com.github.kkojaeh.pico-erp-production-mediator:api:${productionMediatorVersion}")
  runtime("com.github.kkojaeh.pico-erp-production-mediator:impl:${productionMediatorVersion}")

  // company
  compile("com.github.kkojaeh.pico-erp-company:api:${companyVersion}")
  runtime("com.github.kkojaeh.pico-erp-company:test:${companyVersion}")

  // project
  compile("com.github.kkojaeh.pico-erp-project:api:${projectVersion}")
  runtime("com.github.kkojaeh.pico-erp-project:test:${projectVersion}")

  // quotation
  compile("com.github.kkojaeh.pico-erp-quotation:api:${quotationVersion}")
  runtime("com.github.kkojaeh.pico-erp-quotation:test:${quotationVersion}")







  runtime("com.github.kkojaeh.pico-erp-bom:test:${bomVersion}")



  runtime("com.github.kkojaeh.pico-erp-order-acceptance:test:${orderAcceptanceVersion}")

  runtime("com.github.kkojaeh.pico-erp-facility:test:${facilityVersion}")

  runtime("com.github.kkojaeh.pico-erp-purchase-request:test:${purchaseRequestVersion}")

  runtime("com.github.kkojaeh.pico-erp-purchase-order:test:${purchaseOrderVersion}")

  runtime("com.github.kkojaeh.pico-erp-purchase-invoice:test:${purchaseInvoiceVersion}")

  runtime("com.github.kkojaeh.pico-erp-invoice:test:${invoiceVersion}")



  runtime("com.github.kkojaeh.pico-erp-notify:impl:${notifyVersion}")

  runtime("com.github.kkojaeh.pico-erp-production-request:test:${productionRequestVersion}")

  runtime("com.github.kkojaeh.pico-erp-production-plan:test:${productionPlanVersion}")

  runtime("com.github.kkojaeh.pico-erp-product-specification:test:${productSpecificationVersion}")

  runtime("com.github.kkojaeh.pico-erp-outsourcing-request:test:${outsourcingRequestVersion}")
  runtime("com.github.kkojaeh.pico-erp-outsourcing-order:test:${outsourcingOrderVersion}")
  runtime("com.github.kkojaeh.pico-erp-outsourcing-invoice:test:${outsourcingInvoiceVersion}")
  runtime("com.github.kkojaeh.pico-erp-outsourced-invoice:test:${outsourcedInvoiceVersion}")

  compile('com.google.firebase:firebase-admin:6.1.0')

  compile('org.springframework.boot:spring-boot-starter-actuator')

  compile('org.springframework.boot:spring-boot-starter-security')

  compile('io.springfox:springfox-swagger2:2.8.0')
  compile('io.springfox:springfox-data-rest:2.8.0')
  compile('io.springfox:springfox-swagger-ui:2.8.0')

  compile('com.amazonaws:aws-java-sdk-s3')

  compile('commons-fileupload:commons-fileupload:1.3.3')

  compile('io.sentry:sentry:1.7.5')

  compile('org.springframework.boot:spring-boot-starter-web')

  // hibernate second level cache by memcached for 5.2.x
  runtime('com.github.mihaicostin:hibernate-l2-memcached:5.2.17.0')

  runtime('mysql:mysql-connector-java')

  compile('org.springframework.boot:spring-boot-starter-mail')

}


release {
  failOnCommitNeeded = false
  failOnPublishNeeded = true
  failOnSnapshotDependencies = true
  failOnUnversionedFiles = true
  failOnUpdateNeeded = true
  revertOnFail = true
  preCommitText = ''
  preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
  tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
  newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
  tagTemplate = '${version}'
  versionPropertyFile = 'gradle.properties'
  versionProperties = []
  buildTasks = ['build']
  release {
    scmAdapters = [net.researchgate.release.GitAdapter]
  }

  git {
    requireBranch = 'master'
    pushToRemote = 'origin'
    pushToBranchPrefix = ''
    commitVersionFileOnly = false
  }
}

task "aws-elasticbeanstalk-artifact"(type: Zip) {
  doFirst {
    copy {
      from '.aws-elasticbeanstalk'
      into "${buildDir}/.aws-elasticbeanstalk"
    }
    copy {
      from('.aws-elasticbeanstalk') {
        include '.ebextensions/*'
        include 'Procfile'
      }
      into "${buildDir}/.aws-elasticbeanstalk"
      def props = [S3_FIREBASE_SERVICE_ACCOUNT_KEY_FILE_BUCKET: '', S3_FIREBASE_SERVICE_ACCOUNT_KEY_FILE_URL: '', S3_SCOUTER_CONF_FILE_BUCKET: '', S3_SCOUTER_CONF_FILE_URL: '', SCOUTER_OBJ_NAME: '']
      props << project.properties
      props << System.env
      expand(props)
    }
  }
  from "${buildDir}/.aws-elasticbeanstalk"
  from libsDir
  destinationDir = file("${buildDir}/aws-elasticbeanstalk")
  archiveName = "rest-api-server.zip"
}

bootJar {
  mainClassName = 'pico.erp.restapi.RestApiApplication'
  classifier = 'boot'
  // 파일 명 중복으로 인해 추가
  eachFile {
    details ->
      if (details.file.file && details.file.name.endsWith('.jar')) {
        def groupName = details.file.parentFile.parentFile.parentFile.parentFile.name
        details.name = "${groupName}-${details.name}"
      }
  }
}
/*
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}*/
